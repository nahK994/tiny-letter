// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth.proto

package pb_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotifyAuth_PublisherAction_FullMethodName  = "/NotifyAuth/PublisherAction"
	NotifyAuth_SubscriberAction_FullMethodName = "/NotifyAuth/SubscriberAction"
	NotifyAuth_HealthCheck_FullMethodName      = "/NotifyAuth/HealthCheck"
)

// NotifyAuthClient is the client API for NotifyAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyAuthClient interface {
	PublisherAction(ctx context.Context, in *PublisherActionRequest, opts ...grpc.CallOption) (*Response, error)
	SubscriberAction(ctx context.Context, in *SubscriberActionRequest, opts ...grpc.CallOption) (*Response, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type notifyAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyAuthClient(cc grpc.ClientConnInterface) NotifyAuthClient {
	return &notifyAuthClient{cc}
}

func (c *notifyAuthClient) PublisherAction(ctx context.Context, in *PublisherActionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotifyAuth_PublisherAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyAuthClient) SubscriberAction(ctx context.Context, in *SubscriberActionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotifyAuth_SubscriberAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyAuthClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, NotifyAuth_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyAuthServer is the server API for NotifyAuth service.
// All implementations must embed UnimplementedNotifyAuthServer
// for forward compatibility.
type NotifyAuthServer interface {
	PublisherAction(context.Context, *PublisherActionRequest) (*Response, error)
	SubscriberAction(context.Context, *SubscriberActionRequest) (*Response, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedNotifyAuthServer()
}

// UnimplementedNotifyAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotifyAuthServer struct{}

func (UnimplementedNotifyAuthServer) PublisherAction(context.Context, *PublisherActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherAction not implemented")
}
func (UnimplementedNotifyAuthServer) SubscriberAction(context.Context, *SubscriberActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriberAction not implemented")
}
func (UnimplementedNotifyAuthServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedNotifyAuthServer) mustEmbedUnimplementedNotifyAuthServer() {}
func (UnimplementedNotifyAuthServer) testEmbeddedByValue()                    {}

// UnsafeNotifyAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyAuthServer will
// result in compilation errors.
type UnsafeNotifyAuthServer interface {
	mustEmbedUnimplementedNotifyAuthServer()
}

func RegisterNotifyAuthServer(s grpc.ServiceRegistrar, srv NotifyAuthServer) {
	// If the following call pancis, it indicates UnimplementedNotifyAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotifyAuth_ServiceDesc, srv)
}

func _NotifyAuth_PublisherAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAuthServer).PublisherAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyAuth_PublisherAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAuthServer).PublisherAction(ctx, req.(*PublisherActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyAuth_SubscriberAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAuthServer).SubscriberAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyAuth_SubscriberAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAuthServer).SubscriberAction(ctx, req.(*SubscriberActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyAuth_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAuthServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyAuth_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAuthServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyAuth_ServiceDesc is the grpc.ServiceDesc for NotifyAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotifyAuth",
	HandlerType: (*NotifyAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublisherAction",
			Handler:    _NotifyAuth_PublisherAction_Handler,
		},
		{
			MethodName: "SubscriberAction",
			Handler:    _NotifyAuth_SubscriberAction_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _NotifyAuth_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
