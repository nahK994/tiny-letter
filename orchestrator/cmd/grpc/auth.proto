syntax = "proto3";

option go_package = "/auth;pb_auth";

// NotifyAuth service definition
service NotifyAuth {
  // Check availability of a subscription
  rpc CheckAvailability (CheckAvailabilityRequest) returns (Response);

  // Join a publication
  rpc JoinPublication (JoinPublicationRequest) returns (JoinPublicationResponse);
  rpc RollbackJoinPublication (RollbackJoinPublicationRequest) returns (Response);

  // Leave a publication
  rpc LeavePublication (LeavePublicationRequest) returns (LeavePublicationResponse);
  rpc RollbackLeavePublication (RollbackLeavePublicationRequest) returns (Response);

  // Change the plan of a publication
  rpc ChangePublicationPlan (ChangePublicationPlanRequest) returns (ChangePublicationPlanResponse);
  rpc RollbackChangePublicationPlan (RollbackChangePublicationPlanRequest) returns (Response);

  // Confirm publisher subscription
  rpc ConfirmPublisherSubscription (ConfirmPublisherSubscriptionRequest) returns (ConfirmPublisherSubscriptionResponse);
  rpc RollbackConfirmPublisherSubscription (RollbackConfirmPublisherSubscriptionRequest) returns (Response);

  // Revoke publisher subscription
  rpc RevokePublisherSubscription (RevokePublisherSubscriptionRequest) returns (RevokePublisherSubscriptionResponse);
  rpc RollbackRevokePublisherSubscription (RollbackRevokePublisherSubscriptionRequest) returns (Response);

  // Change publisher subscription
  rpc ChangePublisherSubscription (ChangePublisherSubscriptionRequest) returns (ChangePublisherSubscriptionResponse);
  rpc RollbackChangePublisherSubscription (RollbackChangePublisherSubscriptionRequest) returns (Response);
}

// General response message
message Response {
  bool is_success = 1; // Indicates if the operation was successful
}

// Check availability
message CheckAvailabilityRequest {}

// Join publication
message JoinPublicationRequest {
  int32 user_id = 1;         // ID of the user
  int32 publication_id = 2;  // ID of the publication
  bool is_premium = 3;       // Whether the subscription is premium
}
message JoinPublicationResponse {
  int32 subscription_id = 1; // ID of the created subscription
}
message RollbackJoinPublicationRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
}

// Leave publication
message LeavePublicationRequest {
  int32 user_id = 1;         // ID of the user
  int32 publication_id = 2;  // ID of the publication
}
message LeavePublicationResponse {
  int32 subscription_id = 1; // ID of the canceled subscription
}
message RollbackLeavePublicationRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
}

// Change publication plan
message ChangePublicationPlanRequest {
  int32 user_id = 1;         // ID of the user
  int32 publication_id = 2;  // ID of the publication
}
message ChangePublicationPlanResponse {
  int32 subscription_id = 1; // ID of the updated subscription
}
message RollbackChangePublicationPlanRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
}

// Confirm publisher subscription
message ConfirmPublisherSubscriptionRequest {
  int32 user_id = 1;         // ID of the user
  int32 plan_id = 2;         // ID of the plan
}
message ConfirmPublisherSubscriptionResponse {
  int32 subscription_id = 1; // ID of the confirmed subscription
}
message RollbackConfirmPublisherSubscriptionRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
}

// Revoke publisher subscription
message RevokePublisherSubscriptionRequest {
  int32 user_id = 1;         // ID of the user
  int32 plan_id = 2;         // ID of the plan
}
message RevokePublisherSubscriptionResponse {
  int32 subscription_id = 1; // ID of the revoked subscription
}
message RollbackRevokePublisherSubscriptionRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
}

// Change publisher subscription
message ChangePublisherSubscriptionRequest {
  int32 user_id = 1;         // ID of the user
  int32 plan_id = 2;         // ID of the new plan
}
message ChangePublisherSubscriptionResponse {
  int32 subscription_id = 1; // ID of the updated subscription
}
message RollbackChangePublisherSubscriptionRequest {
  int32 subscription_id = 1; // ID of the subscription to rollback
  int32 old_plan_id = 2;     // ID of the previous plan
}
