// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: auth.proto

package pb_auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationListener_PublisherAction_FullMethodName  = "/NotificationListener/PublisherAction"
	NotificationListener_SubscriberAction_FullMethodName = "/NotificationListener/SubscriberAction"
)

// NotificationListenerClient is the client API for NotificationListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationListenerClient interface {
	PublisherAction(ctx context.Context, in *PublisherActionRequest, opts ...grpc.CallOption) (*Response, error)
	SubscriberAction(ctx context.Context, in *SubscriberActionRequest, opts ...grpc.CallOption) (*Response, error)
}

type notificationListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationListenerClient(cc grpc.ClientConnInterface) NotificationListenerClient {
	return &notificationListenerClient{cc}
}

func (c *notificationListenerClient) PublisherAction(ctx context.Context, in *PublisherActionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_PublisherAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) SubscriberAction(ctx context.Context, in *SubscriberActionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_SubscriberAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationListenerServer is the server API for NotificationListener service.
// All implementations must embed UnimplementedNotificationListenerServer
// for forward compatibility.
type NotificationListenerServer interface {
	PublisherAction(context.Context, *PublisherActionRequest) (*Response, error)
	SubscriberAction(context.Context, *SubscriberActionRequest) (*Response, error)
	mustEmbedUnimplementedNotificationListenerServer()
}

// UnimplementedNotificationListenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationListenerServer struct{}

func (UnimplementedNotificationListenerServer) PublisherAction(context.Context, *PublisherActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublisherAction not implemented")
}
func (UnimplementedNotificationListenerServer) SubscriberAction(context.Context, *SubscriberActionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriberAction not implemented")
}
func (UnimplementedNotificationListenerServer) mustEmbedUnimplementedNotificationListenerServer() {}
func (UnimplementedNotificationListenerServer) testEmbeddedByValue()                              {}

// UnsafeNotificationListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationListenerServer will
// result in compilation errors.
type UnsafeNotificationListenerServer interface {
	mustEmbedUnimplementedNotificationListenerServer()
}

func RegisterNotificationListenerServer(s grpc.ServiceRegistrar, srv NotificationListenerServer) {
	// If the following call pancis, it indicates UnimplementedNotificationListenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationListener_ServiceDesc, srv)
}

func _NotificationListener_PublisherAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).PublisherAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_PublisherAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).PublisherAction(ctx, req.(*PublisherActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_SubscriberAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).SubscriberAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_SubscriberAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).SubscriberAction(ctx, req.(*SubscriberActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationListener_ServiceDesc is the grpc.ServiceDesc for NotificationListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationListener",
	HandlerType: (*NotificationListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublisherAction",
			Handler:    _NotificationListener_PublisherAction_Handler,
		},
		{
			MethodName: "SubscriberAction",
			Handler:    _NotificationListener_SubscriberAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
