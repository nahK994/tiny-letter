// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: coordinator.proto

package pb_coordinator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoordinatorListener_JoinPublication_FullMethodName                      = "/CoordinatorListener/JoinPublication"
	CoordinatorListener_RollbackJoinPublication_FullMethodName              = "/CoordinatorListener/RollbackJoinPublication"
	CoordinatorListener_LeavePublication_FullMethodName                     = "/CoordinatorListener/LeavePublication"
	CoordinatorListener_RollbackLeavePublication_FullMethodName             = "/CoordinatorListener/RollbackLeavePublication"
	CoordinatorListener_ChangeSubscriberSubscription_FullMethodName         = "/CoordinatorListener/ChangeSubscriberSubscription"
	CoordinatorListener_RollbackChangeSubscriberSubscription_FullMethodName = "/CoordinatorListener/RollbackChangeSubscriberSubscription"
	CoordinatorListener_ConfirmPublisherSubscription_FullMethodName         = "/CoordinatorListener/ConfirmPublisherSubscription"
	CoordinatorListener_RollbackConfirmPublisherSubscription_FullMethodName = "/CoordinatorListener/RollbackConfirmPublisherSubscription"
	CoordinatorListener_RevokePublisherSubscription_FullMethodName          = "/CoordinatorListener/RevokePublisherSubscription"
	CoordinatorListener_RollbackRevokePublisherSubscription_FullMethodName  = "/CoordinatorListener/RollbackRevokePublisherSubscription"
	CoordinatorListener_ChangePublisherSubscription_FullMethodName          = "/CoordinatorListener/ChangePublisherSubscription"
	CoordinatorListener_RollbackChangePublisherSubscription_FullMethodName  = "/CoordinatorListener/RollbackChangePublisherSubscription"
)

// CoordinatorListenerClient is the client API for CoordinatorListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorListenerClient interface {
	JoinPublication(ctx context.Context, in *JoinPublicationRequest, opts ...grpc.CallOption) (*JoinPublicationResponse, error)
	RollbackJoinPublication(ctx context.Context, in *RollbackJoinPublicationRequest, opts ...grpc.CallOption) (*Response, error)
	LeavePublication(ctx context.Context, in *LeavePublicationRequest, opts ...grpc.CallOption) (*LeavePublicationResponse, error)
	RollbackLeavePublication(ctx context.Context, in *RollbackLeavePublicationRequest, opts ...grpc.CallOption) (*Response, error)
	ChangeSubscriberSubscription(ctx context.Context, in *ChangeSubscriberSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriberSubscriptionResponse, error)
	RollbackChangeSubscriberSubscription(ctx context.Context, in *RollbackChangeSubscriberSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	ConfirmPublisherSubscription(ctx context.Context, in *ConfirmPublisherSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmPublisherSubscriptionResponse, error)
	RollbackConfirmPublisherSubscription(ctx context.Context, in *RollbackConfirmPublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	RevokePublisherSubscription(ctx context.Context, in *RevokePublisherSubscriptionRequest, opts ...grpc.CallOption) (*RevokePublisherSubscriptionResponse, error)
	RollbackRevokePublisherSubscription(ctx context.Context, in *RollbackRevokePublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	ChangePublisherSubscription(ctx context.Context, in *ChangePublisherSubscriptionRequest, opts ...grpc.CallOption) (*ChangePublisherSubscriptionResponse, error)
	RollbackChangePublisherSubscription(ctx context.Context, in *RollbackChangePublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
}

type coordinatorListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorListenerClient(cc grpc.ClientConnInterface) CoordinatorListenerClient {
	return &coordinatorListenerClient{cc}
}

func (c *coordinatorListenerClient) JoinPublication(ctx context.Context, in *JoinPublicationRequest, opts ...grpc.CallOption) (*JoinPublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinPublicationResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_JoinPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackJoinPublication(ctx context.Context, in *RollbackJoinPublicationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackJoinPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) LeavePublication(ctx context.Context, in *LeavePublicationRequest, opts ...grpc.CallOption) (*LeavePublicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavePublicationResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_LeavePublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackLeavePublication(ctx context.Context, in *RollbackLeavePublicationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackLeavePublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) ChangeSubscriberSubscription(ctx context.Context, in *ChangeSubscriberSubscriptionRequest, opts ...grpc.CallOption) (*ChangeSubscriberSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeSubscriberSubscriptionResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_ChangeSubscriberSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackChangeSubscriberSubscription(ctx context.Context, in *RollbackChangeSubscriberSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackChangeSubscriberSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) ConfirmPublisherSubscription(ctx context.Context, in *ConfirmPublisherSubscriptionRequest, opts ...grpc.CallOption) (*ConfirmPublisherSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPublisherSubscriptionResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_ConfirmPublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackConfirmPublisherSubscription(ctx context.Context, in *RollbackConfirmPublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackConfirmPublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RevokePublisherSubscription(ctx context.Context, in *RevokePublisherSubscriptionRequest, opts ...grpc.CallOption) (*RevokePublisherSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokePublisherSubscriptionResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_RevokePublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackRevokePublisherSubscription(ctx context.Context, in *RollbackRevokePublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackRevokePublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) ChangePublisherSubscription(ctx context.Context, in *ChangePublisherSubscriptionRequest, opts ...grpc.CallOption) (*ChangePublisherSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePublisherSubscriptionResponse)
	err := c.cc.Invoke(ctx, CoordinatorListener_ChangePublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorListenerClient) RollbackChangePublisherSubscription(ctx context.Context, in *RollbackChangePublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CoordinatorListener_RollbackChangePublisherSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorListenerServer is the server API for CoordinatorListener service.
// All implementations must embed UnimplementedCoordinatorListenerServer
// for forward compatibility.
type CoordinatorListenerServer interface {
	JoinPublication(context.Context, *JoinPublicationRequest) (*JoinPublicationResponse, error)
	RollbackJoinPublication(context.Context, *RollbackJoinPublicationRequest) (*Response, error)
	LeavePublication(context.Context, *LeavePublicationRequest) (*LeavePublicationResponse, error)
	RollbackLeavePublication(context.Context, *RollbackLeavePublicationRequest) (*Response, error)
	ChangeSubscriberSubscription(context.Context, *ChangeSubscriberSubscriptionRequest) (*ChangeSubscriberSubscriptionResponse, error)
	RollbackChangeSubscriberSubscription(context.Context, *RollbackChangeSubscriberSubscriptionRequest) (*Response, error)
	ConfirmPublisherSubscription(context.Context, *ConfirmPublisherSubscriptionRequest) (*ConfirmPublisherSubscriptionResponse, error)
	RollbackConfirmPublisherSubscription(context.Context, *RollbackConfirmPublisherSubscriptionRequest) (*Response, error)
	RevokePublisherSubscription(context.Context, *RevokePublisherSubscriptionRequest) (*RevokePublisherSubscriptionResponse, error)
	RollbackRevokePublisherSubscription(context.Context, *RollbackRevokePublisherSubscriptionRequest) (*Response, error)
	ChangePublisherSubscription(context.Context, *ChangePublisherSubscriptionRequest) (*ChangePublisherSubscriptionResponse, error)
	RollbackChangePublisherSubscription(context.Context, *RollbackChangePublisherSubscriptionRequest) (*Response, error)
	mustEmbedUnimplementedCoordinatorListenerServer()
}

// UnimplementedCoordinatorListenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorListenerServer struct{}

func (UnimplementedCoordinatorListenerServer) JoinPublication(context.Context, *JoinPublicationRequest) (*JoinPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublication not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackJoinPublication(context.Context, *RollbackJoinPublicationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackJoinPublication not implemented")
}
func (UnimplementedCoordinatorListenerServer) LeavePublication(context.Context, *LeavePublicationRequest) (*LeavePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePublication not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackLeavePublication(context.Context, *RollbackLeavePublicationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackLeavePublication not implemented")
}
func (UnimplementedCoordinatorListenerServer) ChangeSubscriberSubscription(context.Context, *ChangeSubscriberSubscriptionRequest) (*ChangeSubscriberSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubscriberSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackChangeSubscriberSubscription(context.Context, *RollbackChangeSubscriberSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackChangeSubscriberSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) ConfirmPublisherSubscription(context.Context, *ConfirmPublisherSubscriptionRequest) (*ConfirmPublisherSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackConfirmPublisherSubscription(context.Context, *RollbackConfirmPublisherSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackConfirmPublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) RevokePublisherSubscription(context.Context, *RevokePublisherSubscriptionRequest) (*RevokePublisherSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokePublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackRevokePublisherSubscription(context.Context, *RollbackRevokePublisherSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackRevokePublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) ChangePublisherSubscription(context.Context, *ChangePublisherSubscriptionRequest) (*ChangePublisherSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) RollbackChangePublisherSubscription(context.Context, *RollbackChangePublisherSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackChangePublisherSubscription not implemented")
}
func (UnimplementedCoordinatorListenerServer) mustEmbedUnimplementedCoordinatorListenerServer() {}
func (UnimplementedCoordinatorListenerServer) testEmbeddedByValue()                             {}

// UnsafeCoordinatorListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorListenerServer will
// result in compilation errors.
type UnsafeCoordinatorListenerServer interface {
	mustEmbedUnimplementedCoordinatorListenerServer()
}

func RegisterCoordinatorListenerServer(s grpc.ServiceRegistrar, srv CoordinatorListenerServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorListenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoordinatorListener_ServiceDesc, srv)
}

func _CoordinatorListener_JoinPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).JoinPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_JoinPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).JoinPublication(ctx, req.(*JoinPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackJoinPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackJoinPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackJoinPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackJoinPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackJoinPublication(ctx, req.(*RollbackJoinPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_LeavePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).LeavePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_LeavePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).LeavePublication(ctx, req.(*LeavePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackLeavePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackLeavePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackLeavePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackLeavePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackLeavePublication(ctx, req.(*RollbackLeavePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_ChangeSubscriberSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubscriberSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).ChangeSubscriberSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_ChangeSubscriberSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).ChangeSubscriberSubscription(ctx, req.(*ChangeSubscriberSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackChangeSubscriberSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackChangeSubscriberSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackChangeSubscriberSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackChangeSubscriberSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackChangeSubscriberSubscription(ctx, req.(*RollbackChangeSubscriberSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_ConfirmPublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).ConfirmPublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_ConfirmPublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).ConfirmPublisherSubscription(ctx, req.(*ConfirmPublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackConfirmPublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackConfirmPublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackConfirmPublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackConfirmPublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackConfirmPublisherSubscription(ctx, req.(*RollbackConfirmPublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RevokePublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokePublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RevokePublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RevokePublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RevokePublisherSubscription(ctx, req.(*RevokePublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackRevokePublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRevokePublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackRevokePublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackRevokePublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackRevokePublisherSubscription(ctx, req.(*RollbackRevokePublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_ChangePublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).ChangePublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_ChangePublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).ChangePublisherSubscription(ctx, req.(*ChangePublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorListener_RollbackChangePublisherSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackChangePublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorListenerServer).RollbackChangePublisherSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorListener_RollbackChangePublisherSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorListenerServer).RollbackChangePublisherSubscription(ctx, req.(*RollbackChangePublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorListener_ServiceDesc is the grpc.ServiceDesc for CoordinatorListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoordinatorListener",
	HandlerType: (*CoordinatorListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinPublication",
			Handler:    _CoordinatorListener_JoinPublication_Handler,
		},
		{
			MethodName: "RollbackJoinPublication",
			Handler:    _CoordinatorListener_RollbackJoinPublication_Handler,
		},
		{
			MethodName: "LeavePublication",
			Handler:    _CoordinatorListener_LeavePublication_Handler,
		},
		{
			MethodName: "RollbackLeavePublication",
			Handler:    _CoordinatorListener_RollbackLeavePublication_Handler,
		},
		{
			MethodName: "ChangeSubscriberSubscription",
			Handler:    _CoordinatorListener_ChangeSubscriberSubscription_Handler,
		},
		{
			MethodName: "RollbackChangeSubscriberSubscription",
			Handler:    _CoordinatorListener_RollbackChangeSubscriberSubscription_Handler,
		},
		{
			MethodName: "ConfirmPublisherSubscription",
			Handler:    _CoordinatorListener_ConfirmPublisherSubscription_Handler,
		},
		{
			MethodName: "RollbackConfirmPublisherSubscription",
			Handler:    _CoordinatorListener_RollbackConfirmPublisherSubscription_Handler,
		},
		{
			MethodName: "RevokePublisherSubscription",
			Handler:    _CoordinatorListener_RevokePublisherSubscription_Handler,
		},
		{
			MethodName: "RollbackRevokePublisherSubscription",
			Handler:    _CoordinatorListener_RollbackRevokePublisherSubscription_Handler,
		},
		{
			MethodName: "ChangePublisherSubscription",
			Handler:    _CoordinatorListener_ChangePublisherSubscription_Handler,
		},
		{
			MethodName: "RollbackChangePublisherSubscription",
			Handler:    _CoordinatorListener_RollbackChangePublisherSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
