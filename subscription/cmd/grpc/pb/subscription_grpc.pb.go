// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: subscription.proto

package pb_subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationListener_JoinPublication_FullMethodName          = "/NotificationListener/JoinPublication"
	NotificationListener_LeavePublication_FullMethodName         = "/NotificationListener/LeavePublication"
	NotificationListener_ChangePublicationPlan_FullMethodName    = "/NotificationListener/ChangePublicationPlan"
	NotificationListener_SubscribePublisherPlan_FullMethodName   = "/NotificationListener/SubscribePublisherPlan"
	NotificationListener_UnsubscribePublisherPlan_FullMethodName = "/NotificationListener/UnsubscribePublisherPlan"
	NotificationListener_ChangePublisherPlan_FullMethodName      = "/NotificationListener/ChangePublisherPlan"
)

// NotificationListenerClient is the client API for NotificationListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationListenerClient interface {
	JoinPublication(ctx context.Context, in *JoinPublicationRequest, opts ...grpc.CallOption) (*Response, error)
	LeavePublication(ctx context.Context, in *LeavePublicationRequest, opts ...grpc.CallOption) (*Response, error)
	ChangePublicationPlan(ctx context.Context, in *ChangePublicationPlanRequest, opts ...grpc.CallOption) (*Response, error)
	SubscribePublisherPlan(ctx context.Context, in *SubscribePublisherRequest, opts ...grpc.CallOption) (*Response, error)
	UnsubscribePublisherPlan(ctx context.Context, in *UnsubscribePublisherRequest, opts ...grpc.CallOption) (*Response, error)
	ChangePublisherPlan(ctx context.Context, in *ChangePublisherPlanRequest, opts ...grpc.CallOption) (*Response, error)
}

type notificationListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationListenerClient(cc grpc.ClientConnInterface) NotificationListenerClient {
	return &notificationListenerClient{cc}
}

func (c *notificationListenerClient) JoinPublication(ctx context.Context, in *JoinPublicationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_JoinPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) LeavePublication(ctx context.Context, in *LeavePublicationRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_LeavePublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) ChangePublicationPlan(ctx context.Context, in *ChangePublicationPlanRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_ChangePublicationPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) SubscribePublisherPlan(ctx context.Context, in *SubscribePublisherRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_SubscribePublisherPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) UnsubscribePublisherPlan(ctx context.Context, in *UnsubscribePublisherRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_UnsubscribePublisherPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationListenerClient) ChangePublisherPlan(ctx context.Context, in *ChangePublisherPlanRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, NotificationListener_ChangePublisherPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationListenerServer is the server API for NotificationListener service.
// All implementations must embed UnimplementedNotificationListenerServer
// for forward compatibility.
type NotificationListenerServer interface {
	JoinPublication(context.Context, *JoinPublicationRequest) (*Response, error)
	LeavePublication(context.Context, *LeavePublicationRequest) (*Response, error)
	ChangePublicationPlan(context.Context, *ChangePublicationPlanRequest) (*Response, error)
	SubscribePublisherPlan(context.Context, *SubscribePublisherRequest) (*Response, error)
	UnsubscribePublisherPlan(context.Context, *UnsubscribePublisherRequest) (*Response, error)
	ChangePublisherPlan(context.Context, *ChangePublisherPlanRequest) (*Response, error)
	mustEmbedUnimplementedNotificationListenerServer()
}

// UnimplementedNotificationListenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationListenerServer struct{}

func (UnimplementedNotificationListenerServer) JoinPublication(context.Context, *JoinPublicationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublication not implemented")
}
func (UnimplementedNotificationListenerServer) LeavePublication(context.Context, *LeavePublicationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePublication not implemented")
}
func (UnimplementedNotificationListenerServer) ChangePublicationPlan(context.Context, *ChangePublicationPlanRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublicationPlan not implemented")
}
func (UnimplementedNotificationListenerServer) SubscribePublisherPlan(context.Context, *SubscribePublisherRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribePublisherPlan not implemented")
}
func (UnimplementedNotificationListenerServer) UnsubscribePublisherPlan(context.Context, *UnsubscribePublisherRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribePublisherPlan not implemented")
}
func (UnimplementedNotificationListenerServer) ChangePublisherPlan(context.Context, *ChangePublisherPlanRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublisherPlan not implemented")
}
func (UnimplementedNotificationListenerServer) mustEmbedUnimplementedNotificationListenerServer() {}
func (UnimplementedNotificationListenerServer) testEmbeddedByValue()                              {}

// UnsafeNotificationListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationListenerServer will
// result in compilation errors.
type UnsafeNotificationListenerServer interface {
	mustEmbedUnimplementedNotificationListenerServer()
}

func RegisterNotificationListenerServer(s grpc.ServiceRegistrar, srv NotificationListenerServer) {
	// If the following call pancis, it indicates UnimplementedNotificationListenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationListener_ServiceDesc, srv)
}

func _NotificationListener_JoinPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).JoinPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_JoinPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).JoinPublication(ctx, req.(*JoinPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_LeavePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeavePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).LeavePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_LeavePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).LeavePublication(ctx, req.(*LeavePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_ChangePublicationPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublicationPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).ChangePublicationPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_ChangePublicationPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).ChangePublicationPlan(ctx, req.(*ChangePublicationPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_SubscribePublisherPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).SubscribePublisherPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_SubscribePublisherPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).SubscribePublisherPlan(ctx, req.(*SubscribePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_UnsubscribePublisherPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribePublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).UnsubscribePublisherPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_UnsubscribePublisherPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).UnsubscribePublisherPlan(ctx, req.(*UnsubscribePublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationListener_ChangePublisherPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublisherPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationListenerServer).ChangePublisherPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationListener_ChangePublisherPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationListenerServer).ChangePublisherPlan(ctx, req.(*ChangePublisherPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationListener_ServiceDesc is the grpc.ServiceDesc for NotificationListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationListener",
	HandlerType: (*NotificationListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinPublication",
			Handler:    _NotificationListener_JoinPublication_Handler,
		},
		{
			MethodName: "LeavePublication",
			Handler:    _NotificationListener_LeavePublication_Handler,
		},
		{
			MethodName: "ChangePublicationPlan",
			Handler:    _NotificationListener_ChangePublicationPlan_Handler,
		},
		{
			MethodName: "SubscribePublisherPlan",
			Handler:    _NotificationListener_SubscribePublisherPlan_Handler,
		},
		{
			MethodName: "UnsubscribePublisherPlan",
			Handler:    _NotificationListener_UnsubscribePublisherPlan_Handler,
		},
		{
			MethodName: "ChangePublisherPlan",
			Handler:    _NotificationListener_ChangePublisherPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}
