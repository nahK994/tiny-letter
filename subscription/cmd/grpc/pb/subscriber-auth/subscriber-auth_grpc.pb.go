// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: subscriber-auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionAuth_JoinPublication_FullMethodName                 = "/SubscriptionAuth/JoinPublication"
	SubscriptionAuth_LeavePublication_FullMethodName                = "/SubscriptionAuth/LeavePublication"
	SubscriptionAuth_SubscribePublisherPlan_FullMethodName          = "/SubscriptionAuth/SubscribePublisherPlan"
	SubscriptionAuth_UnsubscribePublisherPlan_FullMethodName        = "/SubscriptionAuth/UnsubscribePublisherPlan"
	SubscriptionAuth_ChangePublicationSubscription_FullMethodName   = "/SubscriptionAuth/ChangePublicationSubscription"
	SubscriptionAuth_ChangePublisherSubscriptionPlan_FullMethodName = "/SubscriptionAuth/ChangePublisherSubscriptionPlan"
)

// SubscriptionAuthClient is the client API for SubscriptionAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionAuthClient interface {
	JoinPublication(ctx context.Context, in *ManagePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	LeavePublication(ctx context.Context, in *ManagePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	SubscribePublisherPlan(ctx context.Context, in *PublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	UnsubscribePublisherPlan(ctx context.Context, in *PublisherUnsubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	ChangePublicationSubscription(ctx context.Context, in *ChangePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error)
	ChangePublisherSubscriptionPlan(ctx context.Context, in *ChangePublisherPlanRequest, opts ...grpc.CallOption) (*Response, error)
}

type subscriptionAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionAuthClient(cc grpc.ClientConnInterface) SubscriptionAuthClient {
	return &subscriptionAuthClient{cc}
}

func (c *subscriptionAuthClient) JoinPublication(ctx context.Context, in *ManagePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_JoinPublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAuthClient) LeavePublication(ctx context.Context, in *ManagePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_LeavePublication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAuthClient) SubscribePublisherPlan(ctx context.Context, in *PublisherSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_SubscribePublisherPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAuthClient) UnsubscribePublisherPlan(ctx context.Context, in *PublisherUnsubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_UnsubscribePublisherPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAuthClient) ChangePublicationSubscription(ctx context.Context, in *ChangePublicationSubscriptionRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_ChangePublicationSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionAuthClient) ChangePublisherSubscriptionPlan(ctx context.Context, in *ChangePublisherPlanRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, SubscriptionAuth_ChangePublisherSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionAuthServer is the server API for SubscriptionAuth service.
// All implementations must embed UnimplementedSubscriptionAuthServer
// for forward compatibility.
type SubscriptionAuthServer interface {
	JoinPublication(context.Context, *ManagePublicationSubscriptionRequest) (*Response, error)
	LeavePublication(context.Context, *ManagePublicationSubscriptionRequest) (*Response, error)
	SubscribePublisherPlan(context.Context, *PublisherSubscriptionRequest) (*Response, error)
	UnsubscribePublisherPlan(context.Context, *PublisherUnsubscriptionRequest) (*Response, error)
	ChangePublicationSubscription(context.Context, *ChangePublicationSubscriptionRequest) (*Response, error)
	ChangePublisherSubscriptionPlan(context.Context, *ChangePublisherPlanRequest) (*Response, error)
	mustEmbedUnimplementedSubscriptionAuthServer()
}

// UnimplementedSubscriptionAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionAuthServer struct{}

func (UnimplementedSubscriptionAuthServer) JoinPublication(context.Context, *ManagePublicationSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPublication not implemented")
}
func (UnimplementedSubscriptionAuthServer) LeavePublication(context.Context, *ManagePublicationSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeavePublication not implemented")
}
func (UnimplementedSubscriptionAuthServer) SubscribePublisherPlan(context.Context, *PublisherSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribePublisherPlan not implemented")
}
func (UnimplementedSubscriptionAuthServer) UnsubscribePublisherPlan(context.Context, *PublisherUnsubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribePublisherPlan not implemented")
}
func (UnimplementedSubscriptionAuthServer) ChangePublicationSubscription(context.Context, *ChangePublicationSubscriptionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublicationSubscription not implemented")
}
func (UnimplementedSubscriptionAuthServer) ChangePublisherSubscriptionPlan(context.Context, *ChangePublisherPlanRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePublisherSubscriptionPlan not implemented")
}
func (UnimplementedSubscriptionAuthServer) mustEmbedUnimplementedSubscriptionAuthServer() {}
func (UnimplementedSubscriptionAuthServer) testEmbeddedByValue()                          {}

// UnsafeSubscriptionAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionAuthServer will
// result in compilation errors.
type UnsafeSubscriptionAuthServer interface {
	mustEmbedUnimplementedSubscriptionAuthServer()
}

func RegisterSubscriptionAuthServer(s grpc.ServiceRegistrar, srv SubscriptionAuthServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionAuth_ServiceDesc, srv)
}

func _SubscriptionAuth_JoinPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePublicationSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).JoinPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_JoinPublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).JoinPublication(ctx, req.(*ManagePublicationSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAuth_LeavePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagePublicationSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).LeavePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_LeavePublication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).LeavePublication(ctx, req.(*ManagePublicationSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAuth_SubscribePublisherPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).SubscribePublisherPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_SubscribePublisherPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).SubscribePublisherPlan(ctx, req.(*PublisherSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAuth_UnsubscribePublisherPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublisherUnsubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).UnsubscribePublisherPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_UnsubscribePublisherPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).UnsubscribePublisherPlan(ctx, req.(*PublisherUnsubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAuth_ChangePublicationSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublicationSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).ChangePublicationSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_ChangePublicationSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).ChangePublicationSubscription(ctx, req.(*ChangePublicationSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionAuth_ChangePublisherSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePublisherPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionAuthServer).ChangePublisherSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionAuth_ChangePublisherSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionAuthServer).ChangePublisherSubscriptionPlan(ctx, req.(*ChangePublisherPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionAuth_ServiceDesc is the grpc.ServiceDesc for SubscriptionAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SubscriptionAuth",
	HandlerType: (*SubscriptionAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinPublication",
			Handler:    _SubscriptionAuth_JoinPublication_Handler,
		},
		{
			MethodName: "LeavePublication",
			Handler:    _SubscriptionAuth_LeavePublication_Handler,
		},
		{
			MethodName: "SubscribePublisherPlan",
			Handler:    _SubscriptionAuth_SubscribePublisherPlan_Handler,
		},
		{
			MethodName: "UnsubscribePublisherPlan",
			Handler:    _SubscriptionAuth_UnsubscribePublisherPlan_Handler,
		},
		{
			MethodName: "ChangePublicationSubscription",
			Handler:    _SubscriptionAuth_ChangePublicationSubscription_Handler,
		},
		{
			MethodName: "ChangePublisherSubscriptionPlan",
			Handler:    _SubscriptionAuth_ChangePublisherSubscriptionPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriber-auth.proto",
}
